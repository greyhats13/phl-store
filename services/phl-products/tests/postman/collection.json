{
	"info": {
			"_postman_id": "6f552e26-e166-428c-a220-1845071da8bf",
			"name": "phl-products",
			"description": "Pigeonhole sample Crud product services",
			"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
			"_exporter_id": "17496406",
			"_collection_link": "https://cloudy-comet-657520.postman.co/workspace/80a25a47-86cf-491e-a426-a186d45351a6/collection/17496406-6f552e26-e166-428c-a220-1845071da8bf?action=share&source=collection_link&creator=17496406"
	},
	"item": [
			{
					"name": "Create Product",
					"event": [
							{
									"listen": "prerequest",
									"script": {
											"exec": [
													"// Generate a random integer to append to product name to ensure uniqueness.",
													"let randomInt = Math.floor(Math.random() * 100000);",
													"let productName = \"Product-\" + randomInt;",
													"let productDescription = \"This is a sample product description \" + randomInt;",
													"let productPrice = 99.99;",
													"",
													"// Validate that product name is not empty",
													"pm.test(\"Validate product name is not empty\", function() {",
													"    pm.expect(productName).to.not.be.empty;",
													"});",
													"",
													"// Construct request body for product creation",
													"let requestBody = {",
													"    name: productName,",
													"    description: productDescription,",
													"    price: productPrice",
													"};",
													"pm.variables.set(\"productBody\", JSON.stringify(requestBody));",
													"",
													"// Set the request headers, including Content-Type and Authorization",
													"// Authorization header uses the token from the environment",
													"pm.request.headers.upsert({key: 'Content-Type', value: 'application/json'});",
													"pm.request.headers.upsert({key: 'Authorization', value: 'Bearer ' + pm.environment.get(\"bearer_token\")});",
													"",
													"// Attach the body to the request",
													"pm.request.body.raw = pm.variables.get(\"productBody\");",
													"",
													"// Validate that token is available before sending the request",
													"pm.test(\"Token is available\", function() {",
													"    pm.expect(pm.environment.get(\"bearer_token\")).to.not.be.undefined;",
													"});"
											],
											"type": "text/javascript",
											"packages": {}
									}
							},
							{
									"listen": "test",
									"script": {
											"exec": [
													"// 1. Verify Status Code",
													"pm.test(\"Status code is 201 Created\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// 2. Validate Response Body",
													"let jsonData = pm.response.json();",
													"let sentData = JSON.parse(pm.variables.get(\"productBody\"));",
													"pm.test(\"Response has all required attributes\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"description\");",
													"    pm.expect(jsonData).to.have.property(\"price\");",
													"});",
													"",
													"// Check name matches what was sent",
													"pm.test(\"Product name matches sent data\", function () {",
													"    pm.expect(jsonData.name).to.eql(sentData.name);",
													"});",
													"",
													"// Store product ID for future requests",
													"pm.environment.set(\"product_id\", jsonData.id);",
													"",
													"// 3. Schema Validation using Ajv",
													"const Ajv = require('ajv');",
													"const ajv = new Ajv({allErrors: true});",
													"const schema = {",
													"    \"type\": \"object\",",
													"    \"required\": [\"id\", \"name\", \"description\", \"price\"],",
													"    \"properties\": {",
													"        \"id\": {\"type\": \"number\"},",
													"        \"name\": {\"type\": \"string\"},",
													"        \"description\": {\"type\": \"string\"},",
													"        \"price\": {\"type\": \"number\"}",
													"    }",
													"};",
													"",
													"pm.test(\"Validate response schema with Ajv\", function() {",
													"    const validate = ajv.compile(schema);",
													"    const valid = validate(jsonData);",
													"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;",
													"});"
											],
											"type": "text/javascript",
											"packages": {}
									}
							}
					],
					"request": {
							"auth": {
									"type": "bearer",
									"bearer": [
											{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
											}
									]
							},
							"method": "POST",
							"header": [],
							"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": 6,\n    \"description\": \"Nasi kuning\",\n    \"price\": 35.00\n}",
									"options": {
											"raw": {
													"language": "json"
											}
									}
							},
							"url": {
									"raw": "{{base_url}}/products",
									"host": [
											"{{base_url}}"
									],
									"path": [
											"products"
									]
							}
					},
					"response": []
			},
			{
					"name": "List Product",
					"event": [
							{
									"listen": "test",
									"script": {
											"exec": [
													"// Verify Status Code",
													"pm.test(\"Status code is 200 OK\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let jsonData = pm.response.json();",
													"",
													"// Validate response is an array",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"// Check each product object in the array",
													"pm.test(\"Each product has required attributes\", function () {",
													"    jsonData.forEach(prod => {",
													"        pm.expect(prod).to.have.property(\"id\");",
													"        pm.expect(prod).to.have.property(\"name\");",
													"        pm.expect(prod).to.have.property(\"description\");",
													"        pm.expect(prod).to.have.property(\"price\");",
													"    });",
													"});",
													"",
													"// If a product was previously created, ensure it's listed",
													"let createdId = pm.environment.get(\"product_id\");",
													"if(createdId) {",
													"    pm.test(\"Previously created product exists in list\", function () {",
													"        let found = jsonData.some(prod => prod.id === Number(createdId));",
													"        pm.expect(found).to.be.true;",
													"    });",
													"}",
													"",
													"// Schema validation for each product using Ajv",
													"const Ajv = require('ajv');",
													"const ajv = new Ajv({allErrors: true});",
													"const productSchema = {",
													"    \"type\": \"object\",",
													"    \"required\": [\"id\", \"name\", \"description\", \"price\"],",
													"    \"properties\": {",
													"        \"id\": {\"type\": \"number\"},",
													"        \"name\": {\"type\": \"string\"},",
													"        \"description\": {\"type\": \"string\"},",
													"        \"price\": {\"type\": \"number\"}",
													"    }",
													"};",
													"",
													"pm.test(\"All products match the defined schema\", function() {",
													"    const validate = ajv.compile(productSchema);",
													"    jsonData.forEach(prod => {",
													"        let valid = validate(prod);",
													"        pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;",
													"    });",
													"});"
											],
											"type": "text/javascript",
											"packages": {}
									}
							},
							{
									"listen": "prerequest",
									"script": {
											"exec": [
													"// Set the request URL using base_url environment variable",
													"pm.request.url = pm.environment.get(\"base_url\") + \"/products\";",
													"",
													"// Set required headers",
													"pm.request.headers.upsert({key: 'Accept', value: 'application/json'});",
													"pm.request.headers.upsert({key: 'Authorization', value: 'Bearer ' + pm.environment.get(\"bearer_token\")});",
													"",
													"// If query parameters needed (e.g., pagination), set them here",
													"// pm.request.url.addQueryParams({limit: '10', offset: '0'});",
													"",
													"// Validate that token is available",
													"pm.test(\"Token is available for GET products\", function() {",
													"    pm.expect(pm.environment.get(\"bearer_token\")).to.not.be.undefined;",
													"});"
											],
											"type": "text/javascript",
											"packages": {}
									}
							}
					],
					"request": {
							"auth": {
									"type": "bearer",
									"bearer": [
											{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
											}
									]
							},
							"method": "GET",
							"header": [],
							"url": {
									"raw": "{{base_url}}/products",
									"host": [
											"{{base_url}}"
									],
									"path": [
											"products"
									]
							}
					},
					"response": []
			},
			{
					"name": "Get Product",
					"event": [
							{
									"listen": "test",
									"script": {
											"exec": [
													"// Verify Status Code",
													"pm.test(\"Status code is 200 OK\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let jsonData = pm.response.json();",
													"let savedId = pm.environment.get(\"product_id\");",
													"",
													"// Validate ID matches the requested one",
													"pm.test(\"Returned product has correct ID\", function () {",
													"    pm.expect(jsonData.id).to.equal(Number(savedId));",
													"});",
													"",
													"// Check required fields",
													"pm.test(\"Product has required fields\", function() {",
													"    pm.expect(jsonData).to.have.property(\"name\");",
													"    pm.expect(jsonData).to.have.property(\"description\");",
													"    pm.expect(jsonData).to.have.property(\"price\");",
													"});",
													"",
													"// Schema Validation using Ajv",
													"const Ajv = require('ajv');",
													"const ajv = new Ajv({allErrors: true});",
													"const schema = {",
													"    \"type\": \"object\",",
													"    \"required\": [\"id\", \"name\", \"description\", \"price\"],",
													"    \"properties\": {",
													"        \"id\": {\"type\": \"number\"},",
													"        \"name\": {\"type\": \"string\"},",
													"        \"description\": {\"type\": \"string\"},",
													"        \"price\": {\"type\": \"number\"}",
													"    }",
													"};",
													"",
													"pm.test(\"Validate GET by ID response schema\", function() {",
													"    const validate = ajv.compile(schema);",
													"    let valid = validate(jsonData);",
													"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;",
													"});"
											],
											"type": "text/javascript",
											"packages": {}
									}
							},
							{
									"listen": "prerequest",
									"script": {
											"exec": [
													"// Retrieve product_id from environment",
													"let productId = pm.environment.get(\"product_id\");",
													"pm.request.url = pm.environment.get(\"base_url\") + \"/products/\" + productId;",
													"",
													"// Set headers",
													"pm.request.headers.upsert({key: 'Accept', value: 'application/json'});",
													"pm.request.headers.upsert({key: 'Authorization', value: 'Bearer ' + pm.environment.get(\"bearer_token\")});",
													"",
													"// Ensure product_id is available",
													"pm.test(\"Product ID is available for GET by ID\", function() {",
													"    pm.expect(productId).to.not.be.undefined;",
													"});"
											],
											"type": "text/javascript",
											"packages": {}
									}
							}
					],
					"request": {
							"auth": {
									"type": "bearer",
									"bearer": [
											{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
											}
									]
							},
							"method": "GET",
							"header": [],
							"url": {
									"raw": "{{base_url}}/products/46",
									"host": [
											"{{base_url}}"
									],
									"path": [
											"products",
											"46"
									]
							}
					},
					"response": []
			},
			{
					"name": "Update Product",
					"event": [
							{
									"listen": "test",
									"script": {
											"exec": [
													"// Verify Status Code",
													"pm.test(\"Status code is 200 OK\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let jsonData = pm.response.json();",
													"let updatedData = JSON.parse(pm.request.body.raw);",
													"",
													"// Check that name and price are updated",
													"pm.test(\"Product name updated correctly\", function() {",
													"    pm.expect(jsonData.name).to.equal(updatedData.name);",
													"});",
													"pm.test(\"Product price updated correctly\", function() {",
													"    pm.expect(jsonData.price).to.equal(updatedData.price);",
													"});",
													"",
													"// Check ID remains the same",
													"pm.test(\"Product ID remains the same after update\", function() {",
													"    pm.expect(jsonData.id).to.equal(Number(pm.environment.get(\"product_id\")));",
													"});",
													"",
													"// Schema Validation using Ajv",
													"const Ajv = require('ajv');",
													"const ajv = new Ajv({allErrors: true});",
													"const schema = {",
													"    \"type\": \"object\",",
													"    \"required\": [\"id\", \"name\", \"description\", \"price\"],",
													"    \"properties\": {",
													"        \"id\": {\"type\": \"number\"},",
													"        \"name\": {\"type\": \"string\"},",
													"        \"description\": {\"type\": \"string\"},",
													"        \"price\": {\"type\": \"number\"}",
													"    }",
													"};",
													"",
													"pm.test(\"Validate updated response schema\", function() {",
													"    const validate = ajv.compile(schema);",
													"    let valid = validate(jsonData);",
													"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;",
													"});"
											],
											"type": "text/javascript",
											"packages": {}
									}
							},
							{
									"listen": "prerequest",
									"script": {
											"exec": [
													"// Retrieve existing product_id",
													"let productId = pm.environment.get(\"product_id\");",
													"pm.request.url = pm.environment.get(\"base_url\") + \"/products/\" + productId;",
													"",
													"// Generate random data for update",
													"let randomInt = Math.floor(Math.random() * 100000);",
													"let updatedName = \"Updated-Product-\" + randomInt;",
													"let updatedPrice = 199.99;",
													"",
													"// Set headers",
													"pm.request.headers.upsert({key: 'Content-Type', value: 'application/json'});",
													"pm.request.headers.upsert({key: 'Authorization', value: 'Bearer ' + pm.environment.get(\"bearer_token\")});",
													"",
													"// Validate updated data",
													"pm.test(\"Updated name is not empty\", function() {",
													"    pm.expect(updatedName).to.not.be.empty;",
													"});",
													"",
													"// Construct the update request body",
													"let updateBody = {",
													"    name: updatedName,",
													"    price: updatedPrice",
													"};",
													"pm.request.body.raw = JSON.stringify(updateBody);",
													"",
													"// Ensure product_id is available",
													"pm.test(\"Product ID is available for update\", function() {",
													"    pm.expect(productId).to.not.be.undefined;",
													"});"
											],
											"type": "text/javascript",
											"packages": {}
									}
							}
					],
					"request": {
							"auth": {
									"type": "bearer",
									"bearer": [
											{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
											}
									]
							},
							"method": "PUT",
							"header": [],
							"body": {
									"mode": "raw",
									"raw": "{\n    \"nasi\": 4,\n    \"price\": 200\n}",
									"options": {
											"raw": {
													"language": "json"
											}
									}
							},
							"url": {
									"raw": "{{base_url}}/products/24",
									"host": [
											"{{base_url}}"
									],
									"path": [
											"products",
											"24"
									]
							}
					},
					"response": []
			},
			{
					"name": "Delete Product",
					"event": [
							{
									"listen": "test",
									"script": {
											"exec": [
													"// Verify Status Code for deletion",
													"pm.test(\"Status code is 204 No Content\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"// Optional: We can attempt a GET request after this to ensure the product is actually deleted.",
													"// For now, we just unset the product_id from the environment.",
													"pm.environment.unset(\"product_id\");"
											],
											"type": "text/javascript",
											"packages": {}
									}
							},
							{
									"listen": "prerequest",
									"script": {
											"exec": [
													"// Retrieve product_id",
													"let productId = pm.environment.get(\"product_id\");",
													"pm.request.url = pm.environment.get(\"base_url\") + \"/products/\" + productId;",
													"",
													"// Set headers",
													"pm.request.headers.upsert({key: 'Authorization', value: 'Bearer ' + pm.environment.get(\"bearer_token\")});",
													"",
													"// Ensure product_id is available for deletion",
													"pm.test(\"Product ID is available for deletion\", function() {",
													"    pm.expect(productId).to.not.be.undefined;",
													"});"
											],
											"type": "text/javascript",
											"packages": {}
									}
							}
					],
					"request": {
							"auth": {
									"type": "bearer",
									"bearer": [
											{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
											}
									]
							},
							"method": "DELETE",
							"header": [],
							"url": {
									"raw": "{{base_url}}/products/30",
									"host": [
											"{{base_url}}"
									],
									"path": [
											"products",
											"30"
									]
							}
					},
					"response": []
			}
	]
}