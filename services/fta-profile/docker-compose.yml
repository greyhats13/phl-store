services:
  mysql:
    container_name: mysql
    image: mysql:8.0
    restart: always
    networks:
      - phl-network
    environment:
      MYSQL_ROOT_PASSWORD: passwdRoot123
      MYSQL_DATABASE: profile
      MYSQL_USER: dev
      MYSQL_PASSWORD: passwdDev123
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 10s
      retries: 10

  phl-profile:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DB_HOST=mysql
      - DB_USER=dev
      - DB_PASSWORD=passwdDev123
      - DB_NAME=profile
      - DB_PORT=3306
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - APP_HOST=0.0.0.0
      - APP_PORT=8000
      - APP_LOG_LEVEL=debug
      # - APP_WORKERS=2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://phl-profile:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      mysql:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - phl-network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.66.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "9464:9464" # Prometheus Exporter
    networks:
      - phl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://otel-collector:4317/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - phl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - phl-network
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  db-data:
  prometheus-data:
  grafana-data:

networks:
  phl-network:
    driver: bridge
