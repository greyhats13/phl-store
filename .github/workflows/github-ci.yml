name: CI/CD Pipeline for phl-products

on:
  push:
    branches:
      - main
      - dev
    paths:
      - "services/phl-products/**"
    tags:
      - "v*"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
jobs:
  build_push_tag:
    name: Build, Push, Tag
    runs-on: ubuntu-latest
    # needs: test_and_coverages
    # if: ${{ needs.test_and_coverages.outputs.quality_gate_status != 'FAILED' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main') }}
    if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' }}
    outputs:
      image_tag_sha: ${{ steps.set_image_tag.outputs.image_tag_sha }}
      chart_path: ${{ steps.set_image_tag.outputs.chart_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.GH_OIDC_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Retrieve ECR repo and Set Image Tag vased on environment
        id: set_image_tag
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITOPS_PATH_DEV FROM VARS: ${{ vars.GITOPS_PATH_DEV }}"
          echo "GITOPS_PATH_STG FROM VARS: ${{ vars.GITOPS_PATH_STG }}"
          # if the branch is dev, tag the image as alpha
          if [[ $GITHUB_REF == refs/heads/dev ]]; then
            echo "image_tag_sha=alpha-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
            echo "chart_path=${{ vars.GITOPS_PATH_DEV }}" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG_SHA=alpha-${GITHUB_SHA:0:7}" >> $GITHUB_ENV
            echo "IMAGE_TAG_LATEST=alpha-latest" >> $GITHUB_ENV
            echo "CHART_PATH=${{ vars.GITOPS_PATH_DEV }}" >> $GITHUB_ENV
          # if the branch is main, tag the image as beta
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "image_tag_sha=beta-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
            echo "chart_path=${{ vars.GITOPS_PATH_STG }}" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG_LATEST=beta-latest" >> $GITHUB_ENV
            echo "IMAGE_TAG_SHA=beta-${GITHUB_SHA:0:7}" >> $GITHUB_ENV
            echo "CHART_PATH=${{ vars.GITOPS_PATH_STG }}" >> $GITHUB_ENV
          fi

      - name: Build, Tag, and Push
        uses: docker/build-push-action@v6.9.0
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: ./services/phl-products/
          # Distroless
          # file: ./Dockerfile-distroless
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ vars.PRODUCTS_SVC_NAMING_STANDARD }}:${{ env.IMAGE_TAG_SHA }}
            ${{ env.REGISTRY }}/${{ vars.PRODUCTS_SVC_NAMING_STANDARD }}:${{ env.IMAGE_TAG_LATEST }}
          platforms: linux/amd64
          # # multi-platform
          # platforms: linux/amd64,linux/arm64

  deployment:
    environment: phl-products
    name: Deployment
    runs-on: ubuntu-latest
    needs: [build_push_tag]
    if: ${{ needs.build_push_tag.result == 'success'}}
    steps:
      - name: Trigger ArgoCD Sync by updating the helm chart
        run: |
          echo "IMAGE_TAG_SHA: ${{ needs.build_push_tag.outputs.image_tag_sha }}"
          echo "CHART_PATH: ${{ needs.build_push_tag.outputs.chart_path }}"
          eval "$(ssh-agent -s)"
          echo "${{ secrets.GITOPS_SSH_PRIVATE_KEY }}" > id_rsa
          chmod 400 id_rsa
          ssh-add id_rsa
          git clone git@github.com:${{ vars.GITHUB_OWNER }}/${{ vars.GITHUB_REPO_NAME }}.git
          echo ${{ vars.GITOPS_REPO_NAME }}/${{ needs.build_push_tag.outputs.chart_path }}
          cd ${{ vars.GITOPS_REPO_NAME }}/${{ needs.build_push_tag.outputs.chart_path }}
          sed -i "s|repository: .*|repository: ${{ env.REGISTRY }}/${{ vars.PRODUCTS_SVC_NAMING_STANDARD }}|" values.yaml
          sed -i "s/appVersion: \".*\"/appVersion: \"${{ needs.build_push_tag.outputs.image_tag_sha }}\"/" Chart.yaml
          git add values.yaml Chart.yaml
          git config --global user.email "imam.arief.rhmn@gmail.com"
          git config --global user.name "greyhats13"
          git commit -m "Update image tag to ${{ needs.build_push_tag.outputs.image_tag_sha }}"
          git push origin main
          

  # end_to_end_test:
  #   name: End-to-End Test
  #   runs-on: ubuntu-latest
  #   needs: [deployment]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11'

  #     - name: Install Dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         npm install -g newman

  #     - name: Start the Application
  #       run: |
  #         uvicorn main:app --host 0.0.0.0 --port 8000 &
  #         sleep 5

  #     - name: Run Newman Tests
  #       run: |
  #         newman run profile.postman_collection.json --env-var "base_url=http://127.0.0.1:8000"

  #     - name: Stop the Application
  #       run: |
  #         pkill uvicorn

  # performance_test:
  #   name: Performance Test
  #   runs-on: ubuntu-latest
  #   needs: [deployment]
  #   steps:
  #     - name: Install K6
  #       run: |
  #         sudo apt update
  #         sudo apt install -y gnupg software-properties-common
  #         wget -qO - https://dl.k6.io/key.gpg | sudo apt-key add -
  #         echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
  #         sudo apt update
  #         sudo apt install -y k6

  #     - name: Run K6 Load Test
  #       env:
  #         BASE_URL: 'https://api.phl.blast.co.id'
  #       run: |
  #         k6 run tests/performance/loadtest.js

  # security_test:
  #   name: Security Test
  #   runs-on: ubuntu-latest
  #   needs: [deployment]
  #   steps:
  #     - name: Run OWASP ZAP Baseline Scan
  #       run: |
  #         docker pull owasp/zap2docker-stable
  #         docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t https://profile.dev.phl.blast.co.id -r zap_report.html

  #     - name: Upload ZAP Report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: zap-report
  #         path: zap_report.html

  # notification:
  #   environment: phl-products
  #   name: Notification
  #   runs-on: ubuntu-latest
  #   needs: [test_and_coverages, build_push_tag, retag_and_push, deployment]
  #   if: always()
  #   steps:
  #     - name: Send Notification
  #       run: |
  #         echo "Pipeline completed."
  #         echo "Quality Gate Status: ${{ needs.test_and_coverages.outputs.quality_gate_status }}"
  #         # Here you can add the code to send a notification to Slack or any other service.
