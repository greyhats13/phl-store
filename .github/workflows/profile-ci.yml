name: CI/CD Pipeline for phl-profile

on:
  push:
    branches:
      - main
      - dev
    paths:
      - "services/phl-profile/**"
    tags:
      - "v*"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
jobs:
  build_push_tag:
    name: Build, Push, Tag
    runs-on: ubuntu-latest
    # needs: test_and_coverages
    # if: ${{ needs.test_and_coverages.outputs.quality_gate_status != 'FAILED' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main') }}
    if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' }}
    outputs:
      image_tag_sha: ${{ steps.set_image_tag.outputs.image_tag_sha }}
      chart_path: ${{ steps.set_image_tag.outputs.chart_path }}
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.GH_OIDC_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Retrieve ECR repo and Set Image Tag vased on environment
        id: set_image_tag
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          # if the branch is dev, tag the image as alpha
          if [[ $GITHUB_REF == refs/heads/dev ]]; then
            echo "image_tag_sha=alpha-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
            echo "chart_path=gitops/charts/app/${{ vars.PROFILE_SVC_NAME }}" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG_SHA=alpha-${GITHUB_SHA:0:7}" >> $GITHUB_ENV
            echo "IMAGE_TAG_LATEST=alpha-latest" >> $GITHUB_ENV
            echo "CHART_PATH=gitops/charts/app/${{ vars.PROFILE_SVC_NAME }}" >> $GITHUB_ENV
          # if the branch is main, tag the image as beta
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "image_tag_sha=beta-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
            echo "chart_path=gitops/charts/app/${{ vars.PROFILE_SVC_NAME }}" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG_LATEST=beta-latest" >> $GITHUB_ENV
            echo "IMAGE_TAG_SHA=beta-${GITHUB_SHA:0:7}" >> $GITHUB_ENV
            echo "CHART_PATH=gitops/charts/app/${{ vars.PROFILE_SVC_NAME }}" >> $GITHUB_ENV
          fi

      - name: Build, Tag, and Push
        uses: docker/build-push-action@v6.9.0
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: ./services/phl-profile/
          # Distroless
          # file: ./Dockerfile-distroless
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ vars.PROFILE_SVC_NAMING_STANDARD }}:${{ env.IMAGE_TAG_SHA }}
            ${{ env.REGISTRY }}/${{ vars.PROFILE_SVC_NAMING_STANDARD }}:${{ env.IMAGE_TAG_LATEST }}
          platforms: linux/amd64
          # # multi-platform
          # platforms: linux/amd64,linux/arm64

  deployment:
    environment: phl-profile
    name: Deployment
    runs-on: ubuntu-latest
    needs: [build_push_tag]
    if: ${{ needs.build_push_tag.result == 'success'}}
    steps:
      - name: Trigger ArgoCD Sync by updating the helm chart
        run: |
          echo "IMAGE_TAG_SHA: ${{ needs.build_push_tag.outputs.image_tag_sha }}"
          echo "CHART_PATH: ${{ needs.build_push_tag.outputs.chart_path }}"
          eval "$(ssh-agent -s)"
          echo "${{ secrets.ARGOCD_SSH }}" > id_rsa
          chmod 400 id_rsa
          ssh-add id_rsa
          git clone git@github.com:${{ vars.GH_OWNER }}/${{ vars.GH_REPO_NAME }}.git
          echo ${{ vars.GH_REPO_NAME }}/${{ needs.build_push_tag.outputs.chart_path }}
          cd ${{ vars.GH_REPO_NAME }}/${{ needs.build_push_tag.outputs.chart_path }}
          sed -i "s|repository: .*|repository: ${{ needs.build_push_tag.outputs.registry }}/${{ vars.PROFILE_SVC_NAMING_STANDARD }}|" values.yaml
          sed -i "s/appVersion: \".*\"/appVersion: \"${{ needs.build_push_tag.outputs.image_tag_sha }}\"/" Chart.yaml
          git add values.yaml Chart.yaml
          git config --global user.email "imam.arief.rhmn@gmail.com"
          git config --global user.name "greyhats13"
          git commit -m "Update image tag to ${{ needs.build_push_tag.outputs.image_tag_sha }}"
          git push origin main

  # end_to_end_test:
  #   name: End to End Testing
  #   runs-on: ubuntu-latest
  #   # needs: [deployment] # run after deployment is successful
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # Install Newman and htmlextra reporter
  #     - name: Install Newman & Reporter
  #       run: |
  #         npm install -g newman newman-reporter-htmlextra

  #     - name: Generate JWT Token
  #       id: generate_token
  #       run: |
  #         # Make POST request to obtain token
  #         BEARER_TOKEN_RESPONSE=$(curl -s -X POST "${{ vars.BASE_URL_OAUTH }}/oauth2/token" \
  #           -H "Content-Type: application/x-www-form-urlencoded" \
  #           -d "grant_type=${{ secrets.GRANT_TYPE }}&client_id=${{ secrets.CLIENT_ID }}&client_secret=${{ secrets.CLIENT_SECRET }}")

  #         # Extract access_token using jq
  #         BEARER_TOKEN=$(echo $BEARER_TOKEN_RESPONSE | jq -r '.access_token')

  #         # Check if token was retrieved successfully
  #         if [ "$BEARER_TOKEN" == "null" ] || [ -z "$BEARER_TOKEN" ]; then
  #           echo "Failed to retrieve access token."
  #           echo "Response: $BEARER_TOKEN_RESPONSE"
  #           exit 1
  #         fi

  #         # Set BASE_URL and BEARER_TOKEN as an environment variable
  #         echo "BASE_URL=${{ vars.BASE_URL }}" >> $GITHUB_ENV
  #         echo "BEARER_TOKEN=$BEARER_TOKEN" >> $GITHUB_ENV

  #     # Prepare environment.json
  #     # Inject BASE_URL and BEARER TOKEN into environment.json (you need a template environment.json with placeholders)
  #     - name: Prepare environment for tests
  #       run: |
  #         # The template is at services/phl-profile/tests/postman/environment-template.tpl
  #         # and contains placeholders like {{ BEARER_TOKEN }} and {{ BASE_URL }}
  #         sed "s|{{ BEARER_TOKEN }}|${{ env.BEARER_TOKEN }}|g; s|{{ BASE_URL }}|${{ vars.BASE_URL }}|g" services/${{ vars.PROFILE_SVC_NAME }}/tests/env/environment.tpl > services/${{ vars.PROFILE_SVC_NAME }}/tests/env/environment.json

  #     - name: Run Newman Tests
  #       run: |
  #         # Make sure collection.json and environment.json are present in tests/postman/
  #         mkdir -p newman
  #         newman run services/${{ vars.PROFILE_SVC_NAME }}/tests/postman/collection.json \
  #           -e services/${{ vars.PROFILE_SVC_NAME }}/tests/env/environment.json \
  #           --iteration-count 5 \
  #           --delay-request 200 \
  #           --reporters cli,htmlextra \
  #           --reporter-htmlextra-export newman/report.html

  #     - name: Install k6
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y gnupg software-properties-common
  #         curl -s https://dl.k6.io/key.gpg | sudo apt-key add -
  #         echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
  #         sudo apt-get update
  #         sudo apt-get install -y k6

  #     - name: Run k6 Performance Test
  #       run: |
  #         mkdir -p performance
  #         k6 run --out json=performance/k6-results.json services/phl-profile/tests/k6/k6.js

  #     # Security Scan with ZAP
  #     - name: Security Scan with ZAP
  #       uses: zaproxy/action-api-scan@v0.9.0
  #       with:
  #         target: ${{ env.BASE_URL }} # Use the BASE_URL environment variable as the target
  #         # format: "openapi"
  #         docker_name: "ghcr.io/zaproxy/zaproxy:stable"
  #         rules_file_name: '.zap/rules.tsv'
  #         cmd_options: "-a"
  #         allow_issue_writing: false
  #         artifact_name: "zap_scan_report"

  #     # Download ZAP Scan Report
  #     - name: Download ZAP Scan Report
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: zap_scan_report
  #         path: ./zap_report
  #     - name: Run OWASP ZAP Security Scan
  #       run: |
  #         docker run --rm \
  #           -v ${{ github.workspace }}/services/phl-profile:/zap/wrk/:rw \
  #           -t ictu/zap2docker-weekly zap-api-scan.py -I \
  #             -t /zap/wrk/tests/zap/openapidocs.json \
  #             -f openapi \
  #             -r /zap/wrk/report.html \
  #             -z "auth.bearer_token=${{ env.BEARER_TOKEN }}"

  #     # Configure AWS credentials using GitHub OIDC
  #     - name: Configure AWS Credentials for S3 Upload
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: ${{ vars.AWS_REGION }}
  #         role-to-assume: ${{ vars.GH_OIDC_ROLE_ARN }}

  #     - name: Upload Test Report to S3
  #       run: |
  #         aws s3 cp newman/report.html s3://phl-dev-s3-tfstate/reports/phl-profile/end-to-end/report-$(date +%s).html
  #         # aws s3 cp performance/k6-results.json s3://phl-dev-s3-tfstate/reports/phl-profile/performance/k6-results-$(date +%s).json
  #         aws s3 cp services/phl-profile/report.html s3://phl-dev-s3-tfstate/reports/phl-profile/security/zap-report-$(date +%s).html

  # notification:
  #   environment: phl-profile
  #   name: Notification
  #   runs-on: ubuntu-latest
  #   needs: [test_and_coverages, build_push_tag, retag_and_push, deployment]
  #   if: always()
  #   steps:
  #     - name: Send Notification
  #       run: |
  #         echo "Pipeline completed."
  #         echo "Quality Gate Status: ${{ needs.test_and_coverages.outputs.quality_gate_status }}"
  #         # Here you can add the code to send a notification to Slack or any other service.
